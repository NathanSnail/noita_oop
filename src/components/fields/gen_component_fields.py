import os

COMP_DOCS = os.path.expanduser(
    "~/.local/share/Steam/steamapps/common/Noita/tools_modding/component_documentation.txt"
)

type_defs = {
    "int32": "int",
    "uint32": "int",
    "uint32_t": "int",
    "unsigned int": "int",
    "int64": "int",
    "uint64": "int",
    "int16": "int",
    "uint16": "int",
}


def get_types(src: str) -> dict[str, dict[str, str]]:
    lines = src.split("\n")
    content = {
        "ParticleEmitterComponent": {
            "custom_style": "PARTICLE_EMITTER_CUSTOM_STYLE::Enum",
            "m_cached_image_animation": "ParticleEmitter_Animation*",
        },
        "ExplosionComponent": {"trigger": "EXPLOSION_TRIGGER_TYPE::Enum"},
        "InventoryComponent": {"update_listener": "InvenentoryUpdateListener*"},
        "PathFindingComponent": {
            "job_result_receiver": "MSG_QUEUE_PATH_FINDING_RESULT"
        },
        "MoveToSurfaceOnCreateComponent": {"type": "MOVETOSURFACE_TYPE::Enum"},
        "NinjaRopeComponent": {"mSegments": "NINJA_ROPE_SEGMENT_VECTOR"},
        "PathFindingComponent": {
            "mState": "PathFindingComponentState::Enum",
            "job_result_receiver": "MSG_QUEUE_PATH_FINDING_RESULT",
        },
        "TeleportComponent": {"state": "TeleportComponentState::Enum"},
    }
    content_items = [v2 for _, v in content.items() for _, v2 in v.items()]

    error = "error!"
    name = error
    for line in lines:
        if line == "":
            continue
        if line[0] != " ":
            name = line
            if name not in content.keys():
                content[name] = {}
            continue
        if line[1] == "-":
            continue
        if line[27] != " ":
            good = False
            for item in content_items:
                if item in line:
                    good = True
                    break
            if not good:
                raise Exception("error missing seperator", line)
            continue
        ty = "".join([x for x in line[:27].split(" ") if x != ""])
        field = line[28:].split(" ")[0]
        if ty in type_defs.keys():
            ty = type_defs[ty]
        assert name != error, "Missing component name"
        content[name][field] = ty
    return content


components = get_types(open(COMP_DOCS, "r").read())

basic_types = set(["int", "bool", "float", "double", "std::string"])

out_file = """-- WARN: THIS FILE IS AUTOGENERATED - SEE `./src/components/fields/gen_component_fields.py`
return {
"""
for component, fields in components.items():
    out_file += f"\t{component} = {{\n"
    empty = True
    for field, ty in fields.items():
        lens = "LensValue<"
        if ty[: len(lens)] == lens:
            ty = ty[len(lens) : -1]
        if ty not in basic_types:
            empty = False
            out_file += f'\t\t{field} = "{ty}",\n'
    if empty:
        out_file = out_file[:-1] + "},\n"
    else:
        out_file += "\t},\n"
out_file += "}\n"

open("./src/components/fields/component_fields.lua", "w").write(out_file)
